// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package proxy

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// ERC20VotesUpgradeableCheckpoint is an auto generated low-level Go binding around an user-defined struct.
type ERC20VotesUpgradeableCheckpoint struct {
	FromBlock uint32
	Votes     *big.Int
}

// ArbitrumProxyMetaData contains all meta data concerning the ArbitrumProxy contract.
var ArbitrumProxyMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromDelegate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toDelegate\",\"type\":\"address\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"DelegateVotesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_CAP_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_CAP_NUMERATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_MINT_INTERVAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"pos\",\"type\":\"uint32\"}],\"name\":\"checkpoints\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"fromBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint224\",\"name\":\"votes\",\"type\":\"uint224\"}],\"internalType\":\"structERC20VotesUpgradeable.Checkpoint\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"delegateBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"delegates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getPastTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getPastVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l1TokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_initialSupply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l1Address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"numCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transferAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b506200001c62000022565b620000e4565b600054610100900460ff16156200008f5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff9081161015620000e2576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b61333180620000f46000396000f3fe608060405234801561001057600080fd5b50600436106102415760003560e01c80637ecebe0011610145578063c2eeeebd116100bd578063d505accf1161008c578063e6be487611610071578063e6be487614610552578063f1127ed81461055a578063f2fde38b146105ac57600080fd5b8063d505accf146104f9578063dd62ed3e1461050c57600080fd5b8063c2eeeebd146104a8578063c350a1b5146104c9578063c3cda520146104dc578063cf665443146104ef57600080fd5b806395d89b4111610114578063a457c2d7116100f9578063a457c2d714610477578063a9059cbb1461048a578063a9f8ad041461049d57600080fd5b806395d89b411461045c5780639ab24eb01461046457600080fd5b80637ecebe001461040e57806389110e5d146104215780638da5cb5b1461042a5780638e539e8c1461044957600080fd5b80634000aea0116101d85780635c19a95c116101a757806370a082311161018c57806370a08231146103bd578063715018a6146103f357806379cc6790146103fb57600080fd5b80635c19a95c146103825780636fcfff451461039557600080fd5b80634000aea0146102e957806340c10f19146102fc57806342966c6814610311578063587cde1e1461032457600080fd5b8063313ce56711610214578063313ce567146102ac5780633644e515146102bb57806339509351146102c35780633a46b1a8146102d657600080fd5b806306fdde0314610246578063095ea7b31461026457806318160ddd1461028757806323b872dd14610299575b600080fd5b61024e6105bf565b60405161025b9190612c4c565b60405180910390f35b610277610272366004612c88565b610651565b604051901515815260200161025b565b6035545b60405190815260200161025b565b6102776102a7366004612cb2565b61066b565b6040516012815260200161025b565b61028b61068f565b6102776102d1366004612c88565b61069e565b61028b6102e4366004612c88565b6106ea565b6102776102f7366004612d1d565b610776565b61030f61030a366004612c88565b610806565b005b61030f61031f366004612e06565b6108f2565b61035d610332366004612e1f565b73ffffffffffffffffffffffffffffffffffffffff908116600090815260fe60205260409020541690565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161025b565b61030f610390366004612e1f565b6108ff565b6103a86103a3366004612e1f565b610909565b60405163ffffffff909116815260200161025b565b61028b6103cb366004612e1f565b73ffffffffffffffffffffffffffffffffffffffff1660009081526033602052604090205490565b61030f610938565b61030f610409366004612c88565b61094c565b61028b61041c366004612e1f565b610961565b61028b61271081565b6101305473ffffffffffffffffffffffffffffffffffffffff1661035d565b61028b610457366004612e06565b61098c565b61024e6109e9565b61028b610472366004612e1f565b6109f8565b610277610485366004612c88565b610ac3565b610277610498366004612c88565b610b7a565b61028b6301e1338081565b6101625461035d9073ffffffffffffffffffffffffffffffffffffffff1681565b61030f6104d7366004612e3a565b610b88565b61030f6104ea366004612e87565b610f41565b61028b6101635481565b61030f610507366004612edf565b611084565b61028b61051a366004612f49565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260346020908152604080832093909416825291909152205490565b61028b60c881565b61056d610568366004612f7c565b61120f565b60408051825163ffffffff1681526020928301517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16928101929092520161025b565b61030f6105ba366004612e1f565b6112b5565b6060603680546105ce90612fbc565b80601f01602080910402602001604051908101604052809291908181526020018280546105fa90612fbc565b80156106475780601f1061061c57610100808354040283529160200191610647565b820191906000526020600020905b81548152906001019060200180831161062a57829003601f168201915b5050505050905090565b60003361065f81858561134f565b60019150505b92915050565b6000336106798582856114ce565b610684858585611585565b506001949350505050565b60006106996117f0565b905090565b33600081815260346020908152604080832073ffffffffffffffffffffffffffffffffffffffff8716845290915281205490919061065f90829086906106e5908790613038565b61134f565b60004382106107405760405162461bcd60e51b815260206004820152601f60248201527f4552433230566f7465733a20626c6f636b206e6f7420796574206d696e65640060448201526064015b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8316600090815260ff6020526040902061076f908361186b565b9392505050565b60006107828484610b7a565b508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c1685856040516107e292919061304b565b60405180910390a3833b156107fc576107fc848484611952565b5060019392505050565b61080e6119e2565b61271060c861081c60355490565b610826919061306c565b61083091906130a9565b81111561087f5760405162461bcd60e51b815260206004820152601260248201527f4152423a204d494e545f544f4f5f4d55434800000000000000000000000000006044820152606401610737565b610163544210156108d25760405162461bcd60e51b815260206004820152601360248201527f4152423a204d494e545f544f4f5f4541524c59000000000000000000000000006044820152606401610737565b6108e06301e1338042613038565b610163556108ee8282611a4a565b5050565b6108fc3382611a54565b50565b6108fc3382611a5e565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260ff602052604081205461066590611afd565b6109406119e2565b61094a6000611b7d565b565b6109578233836114ce565b6108ee8282611a54565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260cb6020526040812054610665565b60004382106109dd5760405162461bcd60e51b815260206004820152601f60248201527f4552433230566f7465733a20626c6f636b206e6f7420796574206d696e6564006044820152606401610737565b6106656101008361186b565b6060603780546105ce90612fbc565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260ff60205260408120548015610a9b5773ffffffffffffffffffffffffffffffffffffffff8316600090815260ff60205260409020610a546001836130e4565b81548110610a6457610a646130f7565b60009182526020909120015464010000000090047bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16610a9e565b60005b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff169392505050565b33600081815260346020908152604080832073ffffffffffffffffffffffffffffffffffffffff8716845290915281205490919083811015610b6d5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f0000000000000000000000000000000000000000000000000000006064820152608401610737565b610684828686840361134f565b60003361065f818585611585565b600054610100900460ff1615808015610ba85750600054600160ff909116105b80610bc25750303b158015610bc2575060005460ff166001145b610c345760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610737565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790558015610c9257600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b73ffffffffffffffffffffffffffffffffffffffff8416610cf55760405162461bcd60e51b815260206004820152601960248201527f4152423a205a45524f5f4c31544f4b454e5f41444452455353000000000000006044820152606401610737565b82600003610d455760405162461bcd60e51b815260206004820152601860248201527f4152423a205a45524f5f494e495449414c5f535550504c5900000000000000006044820152606401610737565b73ffffffffffffffffffffffffffffffffffffffff8216610da85760405162461bcd60e51b815260206004820152600f60248201527f4152423a205a45524f5f4f574e455200000000000000000000000000000000006044820152606401610737565b610e1c6040518060400160405280600881526020017f417262697472756d0000000000000000000000000000000000000000000000008152506040518060400160405280600381526020017f4152420000000000000000000000000000000000000000000000000000000000815250611bf5565b610e24611c7c565b610e626040518060400160405280600881526020017f417262697472756d000000000000000000000000000000000000000000000000815250611cf9565b610e6a611c7c565b610e72611db5565b610e7c8284611a4a565b610e8a6301e1338042613038565b6101635561016280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8616179055610ed882611b7d565b8015610f3b57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b83421115610f915760405162461bcd60e51b815260206004820152601d60248201527f4552433230566f7465733a207369676e617475726520657870697265640000006044820152606401610737565b604080517fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf602082015273ffffffffffffffffffffffffffffffffffffffff8816918101919091526060810186905260808101859052600090611018906110109060a00160405160208183030381529060405280519060200120611e3a565b858585611ea3565b905061102381611ecb565b86146110715760405162461bcd60e51b815260206004820152601960248201527f4552433230566f7465733a20696e76616c6964206e6f6e6365000000000000006044820152606401610737565b61107b8188611a5e565b50505050505050565b834211156110d45760405162461bcd60e51b815260206004820152601d60248201527f45524332305065726d69743a206578706972656420646561646c696e650000006044820152606401610737565b60007f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98888886111038c611ecb565b60408051602081019690965273ffffffffffffffffffffffffffffffffffffffff94851690860152929091166060840152608083015260a082015260c0810186905260e001604051602081830303815290604052805190602001209050600061116b82611e3a565b9050600061117b82878787611ea3565b90508973ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146111f85760405162461bcd60e51b815260206004820152601e60248201527f45524332305065726d69743a20696e76616c6964207369676e617475726500006044820152606401610737565b6112038a8a8a61134f565b50505050505050505050565b604080518082019091526000808252602082015273ffffffffffffffffffffffffffffffffffffffff8316600090815260ff60205260409020805463ffffffff8416908110611260576112606130f7565b60009182526020918290206040805180820190915291015463ffffffff8116825264010000000090047bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16918101919091529392505050565b6112bd6119e2565b73ffffffffffffffffffffffffffffffffffffffff81166113465760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610737565b6108fc81611b7d565b73ffffffffffffffffffffffffffffffffffffffff83166113d75760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610737565b73ffffffffffffffffffffffffffffffffffffffff82166114605760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f73730000000000000000000000000000000000000000000000000000000000006064820152608401610737565b73ffffffffffffffffffffffffffffffffffffffff83811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b73ffffffffffffffffffffffffffffffffffffffff8381166000908152603460209081526040808320938616835292905220547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610f3b57818110156115785760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610737565b610f3b848484840361134f565b73ffffffffffffffffffffffffffffffffffffffff831661160e5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152608401610737565b73ffffffffffffffffffffffffffffffffffffffff82166116975760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f65737300000000000000000000000000000000000000000000000000000000006064820152608401610737565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260336020526040902054818110156117335760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e636500000000000000000000000000000000000000000000000000006064820152608401610737565b73ffffffffffffffffffffffffffffffffffffffff808516600090815260336020526040808220858503905591851681529081208054849290611777908490613038565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516117dd91815260200190565b60405180910390a3610f3b848484611f05565b60006106997f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f61181f60975490565b6098546040805160208101859052908101839052606081018290524660808201523060a082015260009060c0016040516020818303038152906040528051906020012090509392505050565b8154600090815b818110156118cf5760006118868284611f10565b90508486828154811061189b5761189b6130f7565b60009182526020909120015463ffffffff1611156118bb578092506118c9565b6118c6816001613038565b91505b50611872565b811561192857846118e16001846130e4565b815481106118f1576118f16130f7565b60009182526020909120015464010000000090047bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1661192b565b60005b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1695945050505050565b6040517fa4c0ed36000000000000000000000000000000000000000000000000000000008152839073ffffffffffffffffffffffffffffffffffffffff82169063a4c0ed36906119aa90339087908790600401613126565b600060405180830381600087803b1580156119c457600080fd5b505af11580156119d8573d6000803e3d6000fd5b5050505050505050565b6101305473ffffffffffffffffffffffffffffffffffffffff16331461094a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610737565b6108ee8282611f2b565b6108ee8282611fd8565b73ffffffffffffffffffffffffffffffffffffffff828116600081815260fe6020818152604080842080546033845282862054949093528787167fffffffffffffffffffffffff00000000000000000000000000000000000000008416811790915590519190951694919391928592917f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f9190a4610f3b828483611ff1565b600063ffffffff821115611b795760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201527f32206269747300000000000000000000000000000000000000000000000000006064820152608401610737565b5090565b610130805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff16611c725760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610737565b6108ee8282612196565b600054610100900460ff1661094a5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610737565b600054610100900460ff16611d765760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610737565b6108fc816040518060400160405280600181526020017f310000000000000000000000000000000000000000000000000000000000000081525061222c565b600054610100900460ff16611e325760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610737565b61094a6122c3565b6000610665611e476117f0565b836040517f19010000000000000000000000000000000000000000000000000000000000006020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b6000806000611eb487878787612349565b91509150611ec181612461565b5095945050505050565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260cb602052604090208054600181018255905b50919050565b505050565b611f0083838361264d565b6000611f1f60028484186130a9565b61076f90848416613038565b611f35828261268c565b6035547bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1015611fc95760405162461bcd60e51b815260206004820152603060248201527f4552433230566f7465733a20746f74616c20737570706c79207269736b73206f60448201527f766572666c6f77696e6720766f746573000000000000000000000000000000006064820152608401610737565b610f3b61010061279a836127a6565b611fe28282612988565b610f3b610100612b48836127a6565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415801561202d5750600081115b15611f005773ffffffffffffffffffffffffffffffffffffffff8316156120e25773ffffffffffffffffffffffffffffffffffffffff8316600090815260ff60205260408120819061208290612b48856127a6565b915091508473ffffffffffffffffffffffffffffffffffffffff167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a72483836040516120d7929190918252602082015260400190565b60405180910390a250505b73ffffffffffffffffffffffffffffffffffffffff821615611f005773ffffffffffffffffffffffffffffffffffffffff8216600090815260ff6020526040812081906121329061279a856127a6565b915091508373ffffffffffffffffffffffffffffffffffffffff167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a7248383604051612187929190918252602082015260400190565b60405180910390a25050505050565b600054610100900460ff166122135760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610737565b603661221f83826131b2565b506037611f0082826131b2565b600054610100900460ff166122a95760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610737565b815160209283012081519190920120609791909155609855565b600054610100900460ff166123405760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610737565b61094a33611b7d565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156123805750600090506003612458565b8460ff16601b1415801561239857508460ff16601c14155b156123a95750600090506004612458565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156123fd573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff811661245157600060019250925050612458565b9150600090505b94509492505050565b6000816004811115612475576124756132cc565b0361247d5750565b6001816004811115612491576124916132cc565b036124de5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610737565b60028160048111156124f2576124f26132cc565b0361253f5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610737565b6003816004811115612553576125536132cc565b036125c65760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152608401610737565b60048160048111156125da576125da6132cc565b036108fc5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152608401610737565b73ffffffffffffffffffffffffffffffffffffffff838116600090815260fe6020526040808220548584168352912054611f0092918216911683611ff1565b73ffffffffffffffffffffffffffffffffffffffff82166126ef5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610737565b80603560008282546127019190613038565b909155505073ffffffffffffffffffffffffffffffffffffffff82166000908152603360205260408120805483929061273b908490613038565b909155505060405181815273ffffffffffffffffffffffffffffffffffffffff8316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a36108ee60008383611f05565b600061076f8284613038565b82546000908190801561280657856127bf6001836130e4565b815481106127cf576127cf6130f7565b60009182526020909120015464010000000090047bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16612809565b60005b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16925061283783858763ffffffff16565b9150600081118015612875575043866128516001846130e4565b81548110612861576128616130f7565b60009182526020909120015463ffffffff16145b156128ff5761288382612b54565b8661288f6001846130e4565b8154811061289f5761289f6130f7565b9060005260206000200160000160046101000a8154817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff02191690837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16021790555061297f565b85604051806040016040528061291443611afd565b63ffffffff16815260200161292885612b54565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff90811690915282546001810184556000938452602093849020835194909301519091166401000000000263ffffffff909316929092179101555b50935093915050565b73ffffffffffffffffffffffffffffffffffffffff8216612a115760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f73000000000000000000000000000000000000000000000000000000000000006064820152608401610737565b73ffffffffffffffffffffffffffffffffffffffff821660009081526033602052604090205481811015612aad5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f63650000000000000000000000000000000000000000000000000000000000006064820152608401610737565b73ffffffffffffffffffffffffffffffffffffffff83166000908152603360205260408120838303905560358054849290612ae99084906130e4565b909155505060405182815260009073ffffffffffffffffffffffffffffffffffffffff8516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3611f0083600084611f05565b600061076f82846130e4565b60007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff821115611b795760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203260448201527f32342062697473000000000000000000000000000000000000000000000000006064820152608401610737565b6000815180845260005b81811015612c0e57602081850181015186830182015201612bf2565b5060006020828601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010191505092915050565b60208152600061076f6020830184612be8565b803573ffffffffffffffffffffffffffffffffffffffff81168114612c8357600080fd5b919050565b60008060408385031215612c9b57600080fd5b612ca483612c5f565b946020939093013593505050565b600080600060608486031215612cc757600080fd5b612cd084612c5f565b9250612cde60208501612c5f565b9150604084013590509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080600060608486031215612d3257600080fd5b612d3b84612c5f565b925060208401359150604084013567ffffffffffffffff80821115612d5f57600080fd5b818601915086601f830112612d7357600080fd5b813581811115612d8557612d85612cee565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908382118183101715612dcb57612dcb612cee565b81604052828152896020848701011115612de457600080fd5b8260208601602083013760006020848301015280955050505050509250925092565b600060208284031215612e1857600080fd5b5035919050565b600060208284031215612e3157600080fd5b61076f82612c5f565b600080600060608486031215612e4f57600080fd5b612e5884612c5f565b925060208401359150612e6d60408501612c5f565b90509250925092565b803560ff81168114612c8357600080fd5b60008060008060008060c08789031215612ea057600080fd5b612ea987612c5f565b95506020870135945060408701359350612ec560608801612e76565b92506080870135915060a087013590509295509295509295565b600080600080600080600060e0888a031215612efa57600080fd5b612f0388612c5f565b9650612f1160208901612c5f565b95506040880135945060608801359350612f2d60808901612e76565b925060a0880135915060c0880135905092959891949750929550565b60008060408385031215612f5c57600080fd5b612f6583612c5f565b9150612f7360208401612c5f565b90509250929050565b60008060408385031215612f8f57600080fd5b612f9883612c5f565b9150602083013563ffffffff81168114612fb157600080fd5b809150509250929050565b600181811c90821680612fd057607f821691505b602082108103611efa577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8082018082111561066557610665613009565b8281526040602082015260006130646040830184612be8565b949350505050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156130a4576130a4613009565b500290565b6000826130df577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b8181038181111561066557610665613009565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8416815282602082015260606040820152600061315b6060830184612be8565b95945050505050565b601f821115611f0057600081815260208120601f850160051c8101602086101561318b5750805b601f850160051c820191505b818110156131aa57828155600101613197565b505050505050565b815167ffffffffffffffff8111156131cc576131cc612cee565b6131e0816131da8454612fbc565b84613164565b602080601f83116001811461323357600084156131fd5750858301515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b1785556131aa565b6000858152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08616915b8281101561328057888601518255948401946001909101908401613261565b50858210156132bc57878501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600388901b60f8161c191681555b5050505050600190811b01905550565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fdfea26469706673582212209a4ebfcf1654bb50d49004911290dec551df800e31d4510dd48656b613e42aa164736f6c63430008100033",
}

// ArbitrumProxyABI is the input ABI used to generate the binding from.
// Deprecated: Use ArbitrumProxyMetaData.ABI instead.
var ArbitrumProxyABI = ArbitrumProxyMetaData.ABI

// ArbitrumProxyBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ArbitrumProxyMetaData.Bin instead.
var ArbitrumProxyBin = ArbitrumProxyMetaData.Bin

// DeployArbitrumProxy deploys a new Ethereum contract, binding an instance of ArbitrumProxy to it.
func DeployArbitrumProxy(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ArbitrumProxy, error) {
	parsed, err := ArbitrumProxyMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ArbitrumProxyBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ArbitrumProxy{ArbitrumProxyCaller: ArbitrumProxyCaller{contract: contract}, ArbitrumProxyTransactor: ArbitrumProxyTransactor{contract: contract}, ArbitrumProxyFilterer: ArbitrumProxyFilterer{contract: contract}}, nil
}

// ArbitrumProxy is an auto generated Go binding around an Ethereum contract.
type ArbitrumProxy struct {
	ArbitrumProxyCaller     // Read-only binding to the contract
	ArbitrumProxyTransactor // Write-only binding to the contract
	ArbitrumProxyFilterer   // Log filterer for contract events
}

// ArbitrumProxyCaller is an auto generated read-only Go binding around an Ethereum contract.
type ArbitrumProxyCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ArbitrumProxyTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ArbitrumProxyTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ArbitrumProxyFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ArbitrumProxyFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ArbitrumProxySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ArbitrumProxySession struct {
	Contract     *ArbitrumProxy    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ArbitrumProxyCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ArbitrumProxyCallerSession struct {
	Contract *ArbitrumProxyCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// ArbitrumProxyTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ArbitrumProxyTransactorSession struct {
	Contract     *ArbitrumProxyTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// ArbitrumProxyRaw is an auto generated low-level Go binding around an Ethereum contract.
type ArbitrumProxyRaw struct {
	Contract *ArbitrumProxy // Generic contract binding to access the raw methods on
}

// ArbitrumProxyCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ArbitrumProxyCallerRaw struct {
	Contract *ArbitrumProxyCaller // Generic read-only contract binding to access the raw methods on
}

// ArbitrumProxyTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ArbitrumProxyTransactorRaw struct {
	Contract *ArbitrumProxyTransactor // Generic write-only contract binding to access the raw methods on
}

// NewArbitrumProxy creates a new instance of ArbitrumProxy, bound to a specific deployed contract.
func NewArbitrumProxy(address common.Address, backend bind.ContractBackend) (*ArbitrumProxy, error) {
	contract, err := bindArbitrumProxy(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ArbitrumProxy{ArbitrumProxyCaller: ArbitrumProxyCaller{contract: contract}, ArbitrumProxyTransactor: ArbitrumProxyTransactor{contract: contract}, ArbitrumProxyFilterer: ArbitrumProxyFilterer{contract: contract}}, nil
}

// NewArbitrumProxyCaller creates a new read-only instance of ArbitrumProxy, bound to a specific deployed contract.
func NewArbitrumProxyCaller(address common.Address, caller bind.ContractCaller) (*ArbitrumProxyCaller, error) {
	contract, err := bindArbitrumProxy(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ArbitrumProxyCaller{contract: contract}, nil
}

// NewArbitrumProxyTransactor creates a new write-only instance of ArbitrumProxy, bound to a specific deployed contract.
func NewArbitrumProxyTransactor(address common.Address, transactor bind.ContractTransactor) (*ArbitrumProxyTransactor, error) {
	contract, err := bindArbitrumProxy(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ArbitrumProxyTransactor{contract: contract}, nil
}

// NewArbitrumProxyFilterer creates a new log filterer instance of ArbitrumProxy, bound to a specific deployed contract.
func NewArbitrumProxyFilterer(address common.Address, filterer bind.ContractFilterer) (*ArbitrumProxyFilterer, error) {
	contract, err := bindArbitrumProxy(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ArbitrumProxyFilterer{contract: contract}, nil
}

// bindArbitrumProxy binds a generic wrapper to an already deployed contract.
func bindArbitrumProxy(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ArbitrumProxyABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ArbitrumProxy *ArbitrumProxyRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ArbitrumProxy.Contract.ArbitrumProxyCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ArbitrumProxy *ArbitrumProxyRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ArbitrumProxy.Contract.ArbitrumProxyTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ArbitrumProxy *ArbitrumProxyRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ArbitrumProxy.Contract.ArbitrumProxyTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ArbitrumProxy *ArbitrumProxyCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ArbitrumProxy.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ArbitrumProxy *ArbitrumProxyTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ArbitrumProxy.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ArbitrumProxy *ArbitrumProxyTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ArbitrumProxy.Contract.contract.Transact(opts, method, params...)
}

// DOMAINSEPARATOR is a free data retrieval call binding the contract method 0x3644e515.
//
// Solidity: function DOMAIN_SEPARATOR() view returns(bytes32)
func (_ArbitrumProxy *ArbitrumProxyCaller) DOMAINSEPARATOR(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _ArbitrumProxy.contract.Call(opts, &out, "DOMAIN_SEPARATOR")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DOMAINSEPARATOR is a free data retrieval call binding the contract method 0x3644e515.
//
// Solidity: function DOMAIN_SEPARATOR() view returns(bytes32)
func (_ArbitrumProxy *ArbitrumProxySession) DOMAINSEPARATOR() ([32]byte, error) {
	return _ArbitrumProxy.Contract.DOMAINSEPARATOR(&_ArbitrumProxy.CallOpts)
}

// DOMAINSEPARATOR is a free data retrieval call binding the contract method 0x3644e515.
//
// Solidity: function DOMAIN_SEPARATOR() view returns(bytes32)
func (_ArbitrumProxy *ArbitrumProxyCallerSession) DOMAINSEPARATOR() ([32]byte, error) {
	return _ArbitrumProxy.Contract.DOMAINSEPARATOR(&_ArbitrumProxy.CallOpts)
}

// MINTCAPDENOMINATOR is a free data retrieval call binding the contract method 0x89110e5d.
//
// Solidity: function MINT_CAP_DENOMINATOR() view returns(uint256)
func (_ArbitrumProxy *ArbitrumProxyCaller) MINTCAPDENOMINATOR(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ArbitrumProxy.contract.Call(opts, &out, "MINT_CAP_DENOMINATOR")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MINTCAPDENOMINATOR is a free data retrieval call binding the contract method 0x89110e5d.
//
// Solidity: function MINT_CAP_DENOMINATOR() view returns(uint256)
func (_ArbitrumProxy *ArbitrumProxySession) MINTCAPDENOMINATOR() (*big.Int, error) {
	return _ArbitrumProxy.Contract.MINTCAPDENOMINATOR(&_ArbitrumProxy.CallOpts)
}

// MINTCAPDENOMINATOR is a free data retrieval call binding the contract method 0x89110e5d.
//
// Solidity: function MINT_CAP_DENOMINATOR() view returns(uint256)
func (_ArbitrumProxy *ArbitrumProxyCallerSession) MINTCAPDENOMINATOR() (*big.Int, error) {
	return _ArbitrumProxy.Contract.MINTCAPDENOMINATOR(&_ArbitrumProxy.CallOpts)
}

// MINTCAPNUMERATOR is a free data retrieval call binding the contract method 0xe6be4876.
//
// Solidity: function MINT_CAP_NUMERATOR() view returns(uint256)
func (_ArbitrumProxy *ArbitrumProxyCaller) MINTCAPNUMERATOR(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ArbitrumProxy.contract.Call(opts, &out, "MINT_CAP_NUMERATOR")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MINTCAPNUMERATOR is a free data retrieval call binding the contract method 0xe6be4876.
//
// Solidity: function MINT_CAP_NUMERATOR() view returns(uint256)
func (_ArbitrumProxy *ArbitrumProxySession) MINTCAPNUMERATOR() (*big.Int, error) {
	return _ArbitrumProxy.Contract.MINTCAPNUMERATOR(&_ArbitrumProxy.CallOpts)
}

// MINTCAPNUMERATOR is a free data retrieval call binding the contract method 0xe6be4876.
//
// Solidity: function MINT_CAP_NUMERATOR() view returns(uint256)
func (_ArbitrumProxy *ArbitrumProxyCallerSession) MINTCAPNUMERATOR() (*big.Int, error) {
	return _ArbitrumProxy.Contract.MINTCAPNUMERATOR(&_ArbitrumProxy.CallOpts)
}

// MINMINTINTERVAL is a free data retrieval call binding the contract method 0xa9f8ad04.
//
// Solidity: function MIN_MINT_INTERVAL() view returns(uint256)
func (_ArbitrumProxy *ArbitrumProxyCaller) MINMINTINTERVAL(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ArbitrumProxy.contract.Call(opts, &out, "MIN_MINT_INTERVAL")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MINMINTINTERVAL is a free data retrieval call binding the contract method 0xa9f8ad04.
//
// Solidity: function MIN_MINT_INTERVAL() view returns(uint256)
func (_ArbitrumProxy *ArbitrumProxySession) MINMINTINTERVAL() (*big.Int, error) {
	return _ArbitrumProxy.Contract.MINMINTINTERVAL(&_ArbitrumProxy.CallOpts)
}

// MINMINTINTERVAL is a free data retrieval call binding the contract method 0xa9f8ad04.
//
// Solidity: function MIN_MINT_INTERVAL() view returns(uint256)
func (_ArbitrumProxy *ArbitrumProxyCallerSession) MINMINTINTERVAL() (*big.Int, error) {
	return _ArbitrumProxy.Contract.MINMINTINTERVAL(&_ArbitrumProxy.CallOpts)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_ArbitrumProxy *ArbitrumProxyCaller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ArbitrumProxy.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_ArbitrumProxy *ArbitrumProxySession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _ArbitrumProxy.Contract.Allowance(&_ArbitrumProxy.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_ArbitrumProxy *ArbitrumProxyCallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _ArbitrumProxy.Contract.Allowance(&_ArbitrumProxy.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_ArbitrumProxy *ArbitrumProxyCaller) BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ArbitrumProxy.contract.Call(opts, &out, "balanceOf", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_ArbitrumProxy *ArbitrumProxySession) BalanceOf(account common.Address) (*big.Int, error) {
	return _ArbitrumProxy.Contract.BalanceOf(&_ArbitrumProxy.CallOpts, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_ArbitrumProxy *ArbitrumProxyCallerSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _ArbitrumProxy.Contract.BalanceOf(&_ArbitrumProxy.CallOpts, account)
}

// Checkpoints is a free data retrieval call binding the contract method 0xf1127ed8.
//
// Solidity: function checkpoints(address account, uint32 pos) view returns((uint32,uint224))
func (_ArbitrumProxy *ArbitrumProxyCaller) Checkpoints(opts *bind.CallOpts, account common.Address, pos uint32) (ERC20VotesUpgradeableCheckpoint, error) {
	var out []interface{}
	err := _ArbitrumProxy.contract.Call(opts, &out, "checkpoints", account, pos)

	if err != nil {
		return *new(ERC20VotesUpgradeableCheckpoint), err
	}

	out0 := *abi.ConvertType(out[0], new(ERC20VotesUpgradeableCheckpoint)).(*ERC20VotesUpgradeableCheckpoint)

	return out0, err

}

// Checkpoints is a free data retrieval call binding the contract method 0xf1127ed8.
//
// Solidity: function checkpoints(address account, uint32 pos) view returns((uint32,uint224))
func (_ArbitrumProxy *ArbitrumProxySession) Checkpoints(account common.Address, pos uint32) (ERC20VotesUpgradeableCheckpoint, error) {
	return _ArbitrumProxy.Contract.Checkpoints(&_ArbitrumProxy.CallOpts, account, pos)
}

// Checkpoints is a free data retrieval call binding the contract method 0xf1127ed8.
//
// Solidity: function checkpoints(address account, uint32 pos) view returns((uint32,uint224))
func (_ArbitrumProxy *ArbitrumProxyCallerSession) Checkpoints(account common.Address, pos uint32) (ERC20VotesUpgradeableCheckpoint, error) {
	return _ArbitrumProxy.Contract.Checkpoints(&_ArbitrumProxy.CallOpts, account, pos)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_ArbitrumProxy *ArbitrumProxyCaller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _ArbitrumProxy.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_ArbitrumProxy *ArbitrumProxySession) Decimals() (uint8, error) {
	return _ArbitrumProxy.Contract.Decimals(&_ArbitrumProxy.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_ArbitrumProxy *ArbitrumProxyCallerSession) Decimals() (uint8, error) {
	return _ArbitrumProxy.Contract.Decimals(&_ArbitrumProxy.CallOpts)
}

// Delegates is a free data retrieval call binding the contract method 0x587cde1e.
//
// Solidity: function delegates(address account) view returns(address)
func (_ArbitrumProxy *ArbitrumProxyCaller) Delegates(opts *bind.CallOpts, account common.Address) (common.Address, error) {
	var out []interface{}
	err := _ArbitrumProxy.contract.Call(opts, &out, "delegates", account)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Delegates is a free data retrieval call binding the contract method 0x587cde1e.
//
// Solidity: function delegates(address account) view returns(address)
func (_ArbitrumProxy *ArbitrumProxySession) Delegates(account common.Address) (common.Address, error) {
	return _ArbitrumProxy.Contract.Delegates(&_ArbitrumProxy.CallOpts, account)
}

// Delegates is a free data retrieval call binding the contract method 0x587cde1e.
//
// Solidity: function delegates(address account) view returns(address)
func (_ArbitrumProxy *ArbitrumProxyCallerSession) Delegates(account common.Address) (common.Address, error) {
	return _ArbitrumProxy.Contract.Delegates(&_ArbitrumProxy.CallOpts, account)
}

// GetPastTotalSupply is a free data retrieval call binding the contract method 0x8e539e8c.
//
// Solidity: function getPastTotalSupply(uint256 blockNumber) view returns(uint256)
func (_ArbitrumProxy *ArbitrumProxyCaller) GetPastTotalSupply(opts *bind.CallOpts, blockNumber *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _ArbitrumProxy.contract.Call(opts, &out, "getPastTotalSupply", blockNumber)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetPastTotalSupply is a free data retrieval call binding the contract method 0x8e539e8c.
//
// Solidity: function getPastTotalSupply(uint256 blockNumber) view returns(uint256)
func (_ArbitrumProxy *ArbitrumProxySession) GetPastTotalSupply(blockNumber *big.Int) (*big.Int, error) {
	return _ArbitrumProxy.Contract.GetPastTotalSupply(&_ArbitrumProxy.CallOpts, blockNumber)
}

// GetPastTotalSupply is a free data retrieval call binding the contract method 0x8e539e8c.
//
// Solidity: function getPastTotalSupply(uint256 blockNumber) view returns(uint256)
func (_ArbitrumProxy *ArbitrumProxyCallerSession) GetPastTotalSupply(blockNumber *big.Int) (*big.Int, error) {
	return _ArbitrumProxy.Contract.GetPastTotalSupply(&_ArbitrumProxy.CallOpts, blockNumber)
}

// GetPastVotes is a free data retrieval call binding the contract method 0x3a46b1a8.
//
// Solidity: function getPastVotes(address account, uint256 blockNumber) view returns(uint256)
func (_ArbitrumProxy *ArbitrumProxyCaller) GetPastVotes(opts *bind.CallOpts, account common.Address, blockNumber *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _ArbitrumProxy.contract.Call(opts, &out, "getPastVotes", account, blockNumber)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetPastVotes is a free data retrieval call binding the contract method 0x3a46b1a8.
//
// Solidity: function getPastVotes(address account, uint256 blockNumber) view returns(uint256)
func (_ArbitrumProxy *ArbitrumProxySession) GetPastVotes(account common.Address, blockNumber *big.Int) (*big.Int, error) {
	return _ArbitrumProxy.Contract.GetPastVotes(&_ArbitrumProxy.CallOpts, account, blockNumber)
}

// GetPastVotes is a free data retrieval call binding the contract method 0x3a46b1a8.
//
// Solidity: function getPastVotes(address account, uint256 blockNumber) view returns(uint256)
func (_ArbitrumProxy *ArbitrumProxyCallerSession) GetPastVotes(account common.Address, blockNumber *big.Int) (*big.Int, error) {
	return _ArbitrumProxy.Contract.GetPastVotes(&_ArbitrumProxy.CallOpts, account, blockNumber)
}

// GetVotes is a free data retrieval call binding the contract method 0x9ab24eb0.
//
// Solidity: function getVotes(address account) view returns(uint256)
func (_ArbitrumProxy *ArbitrumProxyCaller) GetVotes(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ArbitrumProxy.contract.Call(opts, &out, "getVotes", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetVotes is a free data retrieval call binding the contract method 0x9ab24eb0.
//
// Solidity: function getVotes(address account) view returns(uint256)
func (_ArbitrumProxy *ArbitrumProxySession) GetVotes(account common.Address) (*big.Int, error) {
	return _ArbitrumProxy.Contract.GetVotes(&_ArbitrumProxy.CallOpts, account)
}

// GetVotes is a free data retrieval call binding the contract method 0x9ab24eb0.
//
// Solidity: function getVotes(address account) view returns(uint256)
func (_ArbitrumProxy *ArbitrumProxyCallerSession) GetVotes(account common.Address) (*big.Int, error) {
	return _ArbitrumProxy.Contract.GetVotes(&_ArbitrumProxy.CallOpts, account)
}

// L1Address is a free data retrieval call binding the contract method 0xc2eeeebd.
//
// Solidity: function l1Address() view returns(address)
func (_ArbitrumProxy *ArbitrumProxyCaller) L1Address(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ArbitrumProxy.contract.Call(opts, &out, "l1Address")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// L1Address is a free data retrieval call binding the contract method 0xc2eeeebd.
//
// Solidity: function l1Address() view returns(address)
func (_ArbitrumProxy *ArbitrumProxySession) L1Address() (common.Address, error) {
	return _ArbitrumProxy.Contract.L1Address(&_ArbitrumProxy.CallOpts)
}

// L1Address is a free data retrieval call binding the contract method 0xc2eeeebd.
//
// Solidity: function l1Address() view returns(address)
func (_ArbitrumProxy *ArbitrumProxyCallerSession) L1Address() (common.Address, error) {
	return _ArbitrumProxy.Contract.L1Address(&_ArbitrumProxy.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_ArbitrumProxy *ArbitrumProxyCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ArbitrumProxy.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_ArbitrumProxy *ArbitrumProxySession) Name() (string, error) {
	return _ArbitrumProxy.Contract.Name(&_ArbitrumProxy.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_ArbitrumProxy *ArbitrumProxyCallerSession) Name() (string, error) {
	return _ArbitrumProxy.Contract.Name(&_ArbitrumProxy.CallOpts)
}

// NextMint is a free data retrieval call binding the contract method 0xcf665443.
//
// Solidity: function nextMint() view returns(uint256)
func (_ArbitrumProxy *ArbitrumProxyCaller) NextMint(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ArbitrumProxy.contract.Call(opts, &out, "nextMint")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// NextMint is a free data retrieval call binding the contract method 0xcf665443.
//
// Solidity: function nextMint() view returns(uint256)
func (_ArbitrumProxy *ArbitrumProxySession) NextMint() (*big.Int, error) {
	return _ArbitrumProxy.Contract.NextMint(&_ArbitrumProxy.CallOpts)
}

// NextMint is a free data retrieval call binding the contract method 0xcf665443.
//
// Solidity: function nextMint() view returns(uint256)
func (_ArbitrumProxy *ArbitrumProxyCallerSession) NextMint() (*big.Int, error) {
	return _ArbitrumProxy.Contract.NextMint(&_ArbitrumProxy.CallOpts)
}

// Nonces is a free data retrieval call binding the contract method 0x7ecebe00.
//
// Solidity: function nonces(address owner) view returns(uint256)
func (_ArbitrumProxy *ArbitrumProxyCaller) Nonces(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ArbitrumProxy.contract.Call(opts, &out, "nonces", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Nonces is a free data retrieval call binding the contract method 0x7ecebe00.
//
// Solidity: function nonces(address owner) view returns(uint256)
func (_ArbitrumProxy *ArbitrumProxySession) Nonces(owner common.Address) (*big.Int, error) {
	return _ArbitrumProxy.Contract.Nonces(&_ArbitrumProxy.CallOpts, owner)
}

// Nonces is a free data retrieval call binding the contract method 0x7ecebe00.
//
// Solidity: function nonces(address owner) view returns(uint256)
func (_ArbitrumProxy *ArbitrumProxyCallerSession) Nonces(owner common.Address) (*big.Int, error) {
	return _ArbitrumProxy.Contract.Nonces(&_ArbitrumProxy.CallOpts, owner)
}

// NumCheckpoints is a free data retrieval call binding the contract method 0x6fcfff45.
//
// Solidity: function numCheckpoints(address account) view returns(uint32)
func (_ArbitrumProxy *ArbitrumProxyCaller) NumCheckpoints(opts *bind.CallOpts, account common.Address) (uint32, error) {
	var out []interface{}
	err := _ArbitrumProxy.contract.Call(opts, &out, "numCheckpoints", account)

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// NumCheckpoints is a free data retrieval call binding the contract method 0x6fcfff45.
//
// Solidity: function numCheckpoints(address account) view returns(uint32)
func (_ArbitrumProxy *ArbitrumProxySession) NumCheckpoints(account common.Address) (uint32, error) {
	return _ArbitrumProxy.Contract.NumCheckpoints(&_ArbitrumProxy.CallOpts, account)
}

// NumCheckpoints is a free data retrieval call binding the contract method 0x6fcfff45.
//
// Solidity: function numCheckpoints(address account) view returns(uint32)
func (_ArbitrumProxy *ArbitrumProxyCallerSession) NumCheckpoints(account common.Address) (uint32, error) {
	return _ArbitrumProxy.Contract.NumCheckpoints(&_ArbitrumProxy.CallOpts, account)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ArbitrumProxy *ArbitrumProxyCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ArbitrumProxy.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ArbitrumProxy *ArbitrumProxySession) Owner() (common.Address, error) {
	return _ArbitrumProxy.Contract.Owner(&_ArbitrumProxy.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ArbitrumProxy *ArbitrumProxyCallerSession) Owner() (common.Address, error) {
	return _ArbitrumProxy.Contract.Owner(&_ArbitrumProxy.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_ArbitrumProxy *ArbitrumProxyCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ArbitrumProxy.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_ArbitrumProxy *ArbitrumProxySession) Symbol() (string, error) {
	return _ArbitrumProxy.Contract.Symbol(&_ArbitrumProxy.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_ArbitrumProxy *ArbitrumProxyCallerSession) Symbol() (string, error) {
	return _ArbitrumProxy.Contract.Symbol(&_ArbitrumProxy.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_ArbitrumProxy *ArbitrumProxyCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ArbitrumProxy.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_ArbitrumProxy *ArbitrumProxySession) TotalSupply() (*big.Int, error) {
	return _ArbitrumProxy.Contract.TotalSupply(&_ArbitrumProxy.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_ArbitrumProxy *ArbitrumProxyCallerSession) TotalSupply() (*big.Int, error) {
	return _ArbitrumProxy.Contract.TotalSupply(&_ArbitrumProxy.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_ArbitrumProxy *ArbitrumProxyTransactor) Approve(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ArbitrumProxy.contract.Transact(opts, "approve", spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_ArbitrumProxy *ArbitrumProxySession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ArbitrumProxy.Contract.Approve(&_ArbitrumProxy.TransactOpts, spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_ArbitrumProxy *ArbitrumProxyTransactorSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ArbitrumProxy.Contract.Approve(&_ArbitrumProxy.TransactOpts, spender, amount)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 amount) returns()
func (_ArbitrumProxy *ArbitrumProxyTransactor) Burn(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _ArbitrumProxy.contract.Transact(opts, "burn", amount)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 amount) returns()
func (_ArbitrumProxy *ArbitrumProxySession) Burn(amount *big.Int) (*types.Transaction, error) {
	return _ArbitrumProxy.Contract.Burn(&_ArbitrumProxy.TransactOpts, amount)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 amount) returns()
func (_ArbitrumProxy *ArbitrumProxyTransactorSession) Burn(amount *big.Int) (*types.Transaction, error) {
	return _ArbitrumProxy.Contract.Burn(&_ArbitrumProxy.TransactOpts, amount)
}

// BurnFrom is a paid mutator transaction binding the contract method 0x79cc6790.
//
// Solidity: function burnFrom(address account, uint256 amount) returns()
func (_ArbitrumProxy *ArbitrumProxyTransactor) BurnFrom(opts *bind.TransactOpts, account common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ArbitrumProxy.contract.Transact(opts, "burnFrom", account, amount)
}

// BurnFrom is a paid mutator transaction binding the contract method 0x79cc6790.
//
// Solidity: function burnFrom(address account, uint256 amount) returns()
func (_ArbitrumProxy *ArbitrumProxySession) BurnFrom(account common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ArbitrumProxy.Contract.BurnFrom(&_ArbitrumProxy.TransactOpts, account, amount)
}

// BurnFrom is a paid mutator transaction binding the contract method 0x79cc6790.
//
// Solidity: function burnFrom(address account, uint256 amount) returns()
func (_ArbitrumProxy *ArbitrumProxyTransactorSession) BurnFrom(account common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ArbitrumProxy.Contract.BurnFrom(&_ArbitrumProxy.TransactOpts, account, amount)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_ArbitrumProxy *ArbitrumProxyTransactor) DecreaseAllowance(opts *bind.TransactOpts, spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _ArbitrumProxy.contract.Transact(opts, "decreaseAllowance", spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_ArbitrumProxy *ArbitrumProxySession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _ArbitrumProxy.Contract.DecreaseAllowance(&_ArbitrumProxy.TransactOpts, spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_ArbitrumProxy *ArbitrumProxyTransactorSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _ArbitrumProxy.Contract.DecreaseAllowance(&_ArbitrumProxy.TransactOpts, spender, subtractedValue)
}

// Delegate is a paid mutator transaction binding the contract method 0x5c19a95c.
//
// Solidity: function delegate(address delegatee) returns()
func (_ArbitrumProxy *ArbitrumProxyTransactor) Delegate(opts *bind.TransactOpts, delegatee common.Address) (*types.Transaction, error) {
	return _ArbitrumProxy.contract.Transact(opts, "delegate", delegatee)
}

// Delegate is a paid mutator transaction binding the contract method 0x5c19a95c.
//
// Solidity: function delegate(address delegatee) returns()
func (_ArbitrumProxy *ArbitrumProxySession) Delegate(delegatee common.Address) (*types.Transaction, error) {
	return _ArbitrumProxy.Contract.Delegate(&_ArbitrumProxy.TransactOpts, delegatee)
}

// Delegate is a paid mutator transaction binding the contract method 0x5c19a95c.
//
// Solidity: function delegate(address delegatee) returns()
func (_ArbitrumProxy *ArbitrumProxyTransactorSession) Delegate(delegatee common.Address) (*types.Transaction, error) {
	return _ArbitrumProxy.Contract.Delegate(&_ArbitrumProxy.TransactOpts, delegatee)
}

// DelegateBySig is a paid mutator transaction binding the contract method 0xc3cda520.
//
// Solidity: function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s) returns()
func (_ArbitrumProxy *ArbitrumProxyTransactor) DelegateBySig(opts *bind.TransactOpts, delegatee common.Address, nonce *big.Int, expiry *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _ArbitrumProxy.contract.Transact(opts, "delegateBySig", delegatee, nonce, expiry, v, r, s)
}

// DelegateBySig is a paid mutator transaction binding the contract method 0xc3cda520.
//
// Solidity: function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s) returns()
func (_ArbitrumProxy *ArbitrumProxySession) DelegateBySig(delegatee common.Address, nonce *big.Int, expiry *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _ArbitrumProxy.Contract.DelegateBySig(&_ArbitrumProxy.TransactOpts, delegatee, nonce, expiry, v, r, s)
}

// DelegateBySig is a paid mutator transaction binding the contract method 0xc3cda520.
//
// Solidity: function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s) returns()
func (_ArbitrumProxy *ArbitrumProxyTransactorSession) DelegateBySig(delegatee common.Address, nonce *big.Int, expiry *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _ArbitrumProxy.Contract.DelegateBySig(&_ArbitrumProxy.TransactOpts, delegatee, nonce, expiry, v, r, s)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_ArbitrumProxy *ArbitrumProxyTransactor) IncreaseAllowance(opts *bind.TransactOpts, spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _ArbitrumProxy.contract.Transact(opts, "increaseAllowance", spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_ArbitrumProxy *ArbitrumProxySession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _ArbitrumProxy.Contract.IncreaseAllowance(&_ArbitrumProxy.TransactOpts, spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_ArbitrumProxy *ArbitrumProxyTransactorSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _ArbitrumProxy.Contract.IncreaseAllowance(&_ArbitrumProxy.TransactOpts, spender, addedValue)
}

// Initialize is a paid mutator transaction binding the contract method 0xc350a1b5.
//
// Solidity: function initialize(address _l1TokenAddress, uint256 _initialSupply, address _owner) returns()
func (_ArbitrumProxy *ArbitrumProxyTransactor) Initialize(opts *bind.TransactOpts, _l1TokenAddress common.Address, _initialSupply *big.Int, _owner common.Address) (*types.Transaction, error) {
	return _ArbitrumProxy.contract.Transact(opts, "initialize", _l1TokenAddress, _initialSupply, _owner)
}

// Initialize is a paid mutator transaction binding the contract method 0xc350a1b5.
//
// Solidity: function initialize(address _l1TokenAddress, uint256 _initialSupply, address _owner) returns()
func (_ArbitrumProxy *ArbitrumProxySession) Initialize(_l1TokenAddress common.Address, _initialSupply *big.Int, _owner common.Address) (*types.Transaction, error) {
	return _ArbitrumProxy.Contract.Initialize(&_ArbitrumProxy.TransactOpts, _l1TokenAddress, _initialSupply, _owner)
}

// Initialize is a paid mutator transaction binding the contract method 0xc350a1b5.
//
// Solidity: function initialize(address _l1TokenAddress, uint256 _initialSupply, address _owner) returns()
func (_ArbitrumProxy *ArbitrumProxyTransactorSession) Initialize(_l1TokenAddress common.Address, _initialSupply *big.Int, _owner common.Address) (*types.Transaction, error) {
	return _ArbitrumProxy.Contract.Initialize(&_ArbitrumProxy.TransactOpts, _l1TokenAddress, _initialSupply, _owner)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address recipient, uint256 amount) returns()
func (_ArbitrumProxy *ArbitrumProxyTransactor) Mint(opts *bind.TransactOpts, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ArbitrumProxy.contract.Transact(opts, "mint", recipient, amount)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address recipient, uint256 amount) returns()
func (_ArbitrumProxy *ArbitrumProxySession) Mint(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ArbitrumProxy.Contract.Mint(&_ArbitrumProxy.TransactOpts, recipient, amount)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address recipient, uint256 amount) returns()
func (_ArbitrumProxy *ArbitrumProxyTransactorSession) Mint(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ArbitrumProxy.Contract.Mint(&_ArbitrumProxy.TransactOpts, recipient, amount)
}

// Permit is a paid mutator transaction binding the contract method 0xd505accf.
//
// Solidity: function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) returns()
func (_ArbitrumProxy *ArbitrumProxyTransactor) Permit(opts *bind.TransactOpts, owner common.Address, spender common.Address, value *big.Int, deadline *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _ArbitrumProxy.contract.Transact(opts, "permit", owner, spender, value, deadline, v, r, s)
}

// Permit is a paid mutator transaction binding the contract method 0xd505accf.
//
// Solidity: function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) returns()
func (_ArbitrumProxy *ArbitrumProxySession) Permit(owner common.Address, spender common.Address, value *big.Int, deadline *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _ArbitrumProxy.Contract.Permit(&_ArbitrumProxy.TransactOpts, owner, spender, value, deadline, v, r, s)
}

// Permit is a paid mutator transaction binding the contract method 0xd505accf.
//
// Solidity: function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) returns()
func (_ArbitrumProxy *ArbitrumProxyTransactorSession) Permit(owner common.Address, spender common.Address, value *big.Int, deadline *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _ArbitrumProxy.Contract.Permit(&_ArbitrumProxy.TransactOpts, owner, spender, value, deadline, v, r, s)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ArbitrumProxy *ArbitrumProxyTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ArbitrumProxy.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ArbitrumProxy *ArbitrumProxySession) RenounceOwnership() (*types.Transaction, error) {
	return _ArbitrumProxy.Contract.RenounceOwnership(&_ArbitrumProxy.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ArbitrumProxy *ArbitrumProxyTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _ArbitrumProxy.Contract.RenounceOwnership(&_ArbitrumProxy.TransactOpts)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_ArbitrumProxy *ArbitrumProxyTransactor) Transfer(opts *bind.TransactOpts, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ArbitrumProxy.contract.Transact(opts, "transfer", to, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_ArbitrumProxy *ArbitrumProxySession) Transfer(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ArbitrumProxy.Contract.Transfer(&_ArbitrumProxy.TransactOpts, to, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_ArbitrumProxy *ArbitrumProxyTransactorSession) Transfer(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ArbitrumProxy.Contract.Transfer(&_ArbitrumProxy.TransactOpts, to, amount)
}

// TransferAndCall is a paid mutator transaction binding the contract method 0x4000aea0.
//
// Solidity: function transferAndCall(address _to, uint256 _value, bytes _data) returns(bool success)
func (_ArbitrumProxy *ArbitrumProxyTransactor) TransferAndCall(opts *bind.TransactOpts, _to common.Address, _value *big.Int, _data []byte) (*types.Transaction, error) {
	return _ArbitrumProxy.contract.Transact(opts, "transferAndCall", _to, _value, _data)
}

// TransferAndCall is a paid mutator transaction binding the contract method 0x4000aea0.
//
// Solidity: function transferAndCall(address _to, uint256 _value, bytes _data) returns(bool success)
func (_ArbitrumProxy *ArbitrumProxySession) TransferAndCall(_to common.Address, _value *big.Int, _data []byte) (*types.Transaction, error) {
	return _ArbitrumProxy.Contract.TransferAndCall(&_ArbitrumProxy.TransactOpts, _to, _value, _data)
}

// TransferAndCall is a paid mutator transaction binding the contract method 0x4000aea0.
//
// Solidity: function transferAndCall(address _to, uint256 _value, bytes _data) returns(bool success)
func (_ArbitrumProxy *ArbitrumProxyTransactorSession) TransferAndCall(_to common.Address, _value *big.Int, _data []byte) (*types.Transaction, error) {
	return _ArbitrumProxy.Contract.TransferAndCall(&_ArbitrumProxy.TransactOpts, _to, _value, _data)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_ArbitrumProxy *ArbitrumProxyTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ArbitrumProxy.contract.Transact(opts, "transferFrom", from, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_ArbitrumProxy *ArbitrumProxySession) TransferFrom(from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ArbitrumProxy.Contract.TransferFrom(&_ArbitrumProxy.TransactOpts, from, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_ArbitrumProxy *ArbitrumProxyTransactorSession) TransferFrom(from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ArbitrumProxy.Contract.TransferFrom(&_ArbitrumProxy.TransactOpts, from, to, amount)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ArbitrumProxy *ArbitrumProxyTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _ArbitrumProxy.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ArbitrumProxy *ArbitrumProxySession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ArbitrumProxy.Contract.TransferOwnership(&_ArbitrumProxy.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ArbitrumProxy *ArbitrumProxyTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ArbitrumProxy.Contract.TransferOwnership(&_ArbitrumProxy.TransactOpts, newOwner)
}

// ArbitrumProxyApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the ArbitrumProxy contract.
type ArbitrumProxyApprovalIterator struct {
	Event *ArbitrumProxyApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ArbitrumProxyApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ArbitrumProxyApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ArbitrumProxyApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ArbitrumProxyApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ArbitrumProxyApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ArbitrumProxyApproval represents a Approval event raised by the ArbitrumProxy contract.
type ArbitrumProxyApproval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_ArbitrumProxy *ArbitrumProxyFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*ArbitrumProxyApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _ArbitrumProxy.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &ArbitrumProxyApprovalIterator{contract: _ArbitrumProxy.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_ArbitrumProxy *ArbitrumProxyFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *ArbitrumProxyApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _ArbitrumProxy.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ArbitrumProxyApproval)
				if err := _ArbitrumProxy.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_ArbitrumProxy *ArbitrumProxyFilterer) ParseApproval(log types.Log) (*ArbitrumProxyApproval, error) {
	event := new(ArbitrumProxyApproval)
	if err := _ArbitrumProxy.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ArbitrumProxyDelegateChangedIterator is returned from FilterDelegateChanged and is used to iterate over the raw logs and unpacked data for DelegateChanged events raised by the ArbitrumProxy contract.
type ArbitrumProxyDelegateChangedIterator struct {
	Event *ArbitrumProxyDelegateChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ArbitrumProxyDelegateChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ArbitrumProxyDelegateChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ArbitrumProxyDelegateChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ArbitrumProxyDelegateChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ArbitrumProxyDelegateChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ArbitrumProxyDelegateChanged represents a DelegateChanged event raised by the ArbitrumProxy contract.
type ArbitrumProxyDelegateChanged struct {
	Delegator    common.Address
	FromDelegate common.Address
	ToDelegate   common.Address
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterDelegateChanged is a free log retrieval operation binding the contract event 0x3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f.
//
// Solidity: event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate)
func (_ArbitrumProxy *ArbitrumProxyFilterer) FilterDelegateChanged(opts *bind.FilterOpts, delegator []common.Address, fromDelegate []common.Address, toDelegate []common.Address) (*ArbitrumProxyDelegateChangedIterator, error) {

	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}
	var fromDelegateRule []interface{}
	for _, fromDelegateItem := range fromDelegate {
		fromDelegateRule = append(fromDelegateRule, fromDelegateItem)
	}
	var toDelegateRule []interface{}
	for _, toDelegateItem := range toDelegate {
		toDelegateRule = append(toDelegateRule, toDelegateItem)
	}

	logs, sub, err := _ArbitrumProxy.contract.FilterLogs(opts, "DelegateChanged", delegatorRule, fromDelegateRule, toDelegateRule)
	if err != nil {
		return nil, err
	}
	return &ArbitrumProxyDelegateChangedIterator{contract: _ArbitrumProxy.contract, event: "DelegateChanged", logs: logs, sub: sub}, nil
}

// WatchDelegateChanged is a free log subscription operation binding the contract event 0x3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f.
//
// Solidity: event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate)
func (_ArbitrumProxy *ArbitrumProxyFilterer) WatchDelegateChanged(opts *bind.WatchOpts, sink chan<- *ArbitrumProxyDelegateChanged, delegator []common.Address, fromDelegate []common.Address, toDelegate []common.Address) (event.Subscription, error) {

	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}
	var fromDelegateRule []interface{}
	for _, fromDelegateItem := range fromDelegate {
		fromDelegateRule = append(fromDelegateRule, fromDelegateItem)
	}
	var toDelegateRule []interface{}
	for _, toDelegateItem := range toDelegate {
		toDelegateRule = append(toDelegateRule, toDelegateItem)
	}

	logs, sub, err := _ArbitrumProxy.contract.WatchLogs(opts, "DelegateChanged", delegatorRule, fromDelegateRule, toDelegateRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ArbitrumProxyDelegateChanged)
				if err := _ArbitrumProxy.contract.UnpackLog(event, "DelegateChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDelegateChanged is a log parse operation binding the contract event 0x3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f.
//
// Solidity: event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate)
func (_ArbitrumProxy *ArbitrumProxyFilterer) ParseDelegateChanged(log types.Log) (*ArbitrumProxyDelegateChanged, error) {
	event := new(ArbitrumProxyDelegateChanged)
	if err := _ArbitrumProxy.contract.UnpackLog(event, "DelegateChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ArbitrumProxyDelegateVotesChangedIterator is returned from FilterDelegateVotesChanged and is used to iterate over the raw logs and unpacked data for DelegateVotesChanged events raised by the ArbitrumProxy contract.
type ArbitrumProxyDelegateVotesChangedIterator struct {
	Event *ArbitrumProxyDelegateVotesChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ArbitrumProxyDelegateVotesChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ArbitrumProxyDelegateVotesChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ArbitrumProxyDelegateVotesChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ArbitrumProxyDelegateVotesChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ArbitrumProxyDelegateVotesChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ArbitrumProxyDelegateVotesChanged represents a DelegateVotesChanged event raised by the ArbitrumProxy contract.
type ArbitrumProxyDelegateVotesChanged struct {
	Delegate        common.Address
	PreviousBalance *big.Int
	NewBalance      *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterDelegateVotesChanged is a free log retrieval operation binding the contract event 0xdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724.
//
// Solidity: event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance)
func (_ArbitrumProxy *ArbitrumProxyFilterer) FilterDelegateVotesChanged(opts *bind.FilterOpts, delegate []common.Address) (*ArbitrumProxyDelegateVotesChangedIterator, error) {

	var delegateRule []interface{}
	for _, delegateItem := range delegate {
		delegateRule = append(delegateRule, delegateItem)
	}

	logs, sub, err := _ArbitrumProxy.contract.FilterLogs(opts, "DelegateVotesChanged", delegateRule)
	if err != nil {
		return nil, err
	}
	return &ArbitrumProxyDelegateVotesChangedIterator{contract: _ArbitrumProxy.contract, event: "DelegateVotesChanged", logs: logs, sub: sub}, nil
}

// WatchDelegateVotesChanged is a free log subscription operation binding the contract event 0xdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724.
//
// Solidity: event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance)
func (_ArbitrumProxy *ArbitrumProxyFilterer) WatchDelegateVotesChanged(opts *bind.WatchOpts, sink chan<- *ArbitrumProxyDelegateVotesChanged, delegate []common.Address) (event.Subscription, error) {

	var delegateRule []interface{}
	for _, delegateItem := range delegate {
		delegateRule = append(delegateRule, delegateItem)
	}

	logs, sub, err := _ArbitrumProxy.contract.WatchLogs(opts, "DelegateVotesChanged", delegateRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ArbitrumProxyDelegateVotesChanged)
				if err := _ArbitrumProxy.contract.UnpackLog(event, "DelegateVotesChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDelegateVotesChanged is a log parse operation binding the contract event 0xdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724.
//
// Solidity: event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance)
func (_ArbitrumProxy *ArbitrumProxyFilterer) ParseDelegateVotesChanged(log types.Log) (*ArbitrumProxyDelegateVotesChanged, error) {
	event := new(ArbitrumProxyDelegateVotesChanged)
	if err := _ArbitrumProxy.contract.UnpackLog(event, "DelegateVotesChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ArbitrumProxyInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the ArbitrumProxy contract.
type ArbitrumProxyInitializedIterator struct {
	Event *ArbitrumProxyInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ArbitrumProxyInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ArbitrumProxyInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ArbitrumProxyInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ArbitrumProxyInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ArbitrumProxyInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ArbitrumProxyInitialized represents a Initialized event raised by the ArbitrumProxy contract.
type ArbitrumProxyInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_ArbitrumProxy *ArbitrumProxyFilterer) FilterInitialized(opts *bind.FilterOpts) (*ArbitrumProxyInitializedIterator, error) {

	logs, sub, err := _ArbitrumProxy.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &ArbitrumProxyInitializedIterator{contract: _ArbitrumProxy.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_ArbitrumProxy *ArbitrumProxyFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *ArbitrumProxyInitialized) (event.Subscription, error) {

	logs, sub, err := _ArbitrumProxy.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ArbitrumProxyInitialized)
				if err := _ArbitrumProxy.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_ArbitrumProxy *ArbitrumProxyFilterer) ParseInitialized(log types.Log) (*ArbitrumProxyInitialized, error) {
	event := new(ArbitrumProxyInitialized)
	if err := _ArbitrumProxy.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ArbitrumProxyOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the ArbitrumProxy contract.
type ArbitrumProxyOwnershipTransferredIterator struct {
	Event *ArbitrumProxyOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ArbitrumProxyOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ArbitrumProxyOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ArbitrumProxyOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ArbitrumProxyOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ArbitrumProxyOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ArbitrumProxyOwnershipTransferred represents a OwnershipTransferred event raised by the ArbitrumProxy contract.
type ArbitrumProxyOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ArbitrumProxy *ArbitrumProxyFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*ArbitrumProxyOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ArbitrumProxy.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &ArbitrumProxyOwnershipTransferredIterator{contract: _ArbitrumProxy.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ArbitrumProxy *ArbitrumProxyFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *ArbitrumProxyOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ArbitrumProxy.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ArbitrumProxyOwnershipTransferred)
				if err := _ArbitrumProxy.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ArbitrumProxy *ArbitrumProxyFilterer) ParseOwnershipTransferred(log types.Log) (*ArbitrumProxyOwnershipTransferred, error) {
	event := new(ArbitrumProxyOwnershipTransferred)
	if err := _ArbitrumProxy.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ArbitrumProxyTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the ArbitrumProxy contract.
type ArbitrumProxyTransferIterator struct {
	Event *ArbitrumProxyTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ArbitrumProxyTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ArbitrumProxyTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ArbitrumProxyTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ArbitrumProxyTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ArbitrumProxyTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ArbitrumProxyTransfer represents a Transfer event raised by the ArbitrumProxy contract.
type ArbitrumProxyTransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Data  []byte
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c16.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value, bytes data)
func (_ArbitrumProxy *ArbitrumProxyFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*ArbitrumProxyTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _ArbitrumProxy.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &ArbitrumProxyTransferIterator{contract: _ArbitrumProxy.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c16.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value, bytes data)
func (_ArbitrumProxy *ArbitrumProxyFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *ArbitrumProxyTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _ArbitrumProxy.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ArbitrumProxyTransfer)
				if err := _ArbitrumProxy.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c16.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value, bytes data)
func (_ArbitrumProxy *ArbitrumProxyFilterer) ParseTransfer(log types.Log) (*ArbitrumProxyTransfer, error) {
	event := new(ArbitrumProxyTransfer)
	if err := _ArbitrumProxy.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ArbitrumProxyTransfer0Iterator is returned from FilterTransfer0 and is used to iterate over the raw logs and unpacked data for Transfer0 events raised by the ArbitrumProxy contract.
type ArbitrumProxyTransfer0Iterator struct {
	Event *ArbitrumProxyTransfer0 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ArbitrumProxyTransfer0Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ArbitrumProxyTransfer0)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ArbitrumProxyTransfer0)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ArbitrumProxyTransfer0Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ArbitrumProxyTransfer0Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ArbitrumProxyTransfer0 represents a Transfer0 event raised by the ArbitrumProxy contract.
type ArbitrumProxyTransfer0 struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer0 is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_ArbitrumProxy *ArbitrumProxyFilterer) FilterTransfer0(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*ArbitrumProxyTransfer0Iterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _ArbitrumProxy.contract.FilterLogs(opts, "Transfer0", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &ArbitrumProxyTransfer0Iterator{contract: _ArbitrumProxy.contract, event: "Transfer0", logs: logs, sub: sub}, nil
}

// WatchTransfer0 is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_ArbitrumProxy *ArbitrumProxyFilterer) WatchTransfer0(opts *bind.WatchOpts, sink chan<- *ArbitrumProxyTransfer0, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _ArbitrumProxy.contract.WatchLogs(opts, "Transfer0", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ArbitrumProxyTransfer0)
				if err := _ArbitrumProxy.contract.UnpackLog(event, "Transfer0", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer0 is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_ArbitrumProxy *ArbitrumProxyFilterer) ParseTransfer0(log types.Log) (*ArbitrumProxyTransfer0, error) {
	event := new(ArbitrumProxyTransfer0)
	if err := _ArbitrumProxy.contract.UnpackLog(event, "Transfer0", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
